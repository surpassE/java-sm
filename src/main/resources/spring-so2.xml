<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-4.0.xsd http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">


	<http pattern="/auth/login.jsp" security="none" />  
    <http pattern="/common/**" security="none" />  
    <http pattern="/*.ico" security="none" />
    <http pattern="/comjs/**" security="none" />
    <http pattern="/template/**" security="none" />
    
    <!-- *********************** Spring Oauth2 ****************************************** -->
	
	<!-- 获得token的入口地址 -->
<!-- 	<http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="oauth2AuthenticationManager"
		entry-point-ref="oauth2AuthenticationEntryPoint">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />

		<custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>
	 -->
	<!--处理认证点-->
	<!-- <beans:bean id="oauth2AuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" >
	</beans:bean>
	 -->
	<!-- 用于验证、管理token -->
	<!-- <authentication-manager id="oauth2AuthenticationManager">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>
	
	<beans:bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="custClientDetailsService" />
	</beans:bean>
	 -->
	<!-- ClientCredentialsTokenEndpointFilter配置, 该Filter将作用于Spring Security的chain链条中 -->
<!-- 	<beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
	</beans:bean>
 -->
	<!-- 认证token的处理器 -->
	<!-- <beans:bean id="outh2AuthenticationProcessingFilter"
		class="org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter">
		<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
	</beans:bean>
	 -->
	
	
	<!-- 通过JdbcTokenStore将token存储到数据库中 -->
	<!-- <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <beans:constructor-arg index="0" ref="dataSource"/>
    </beans:bean> -->
    
	<!-- 配置tokenService -->
<!-- 	<beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="true" />
		刷新token有效时间(s)：default 30 days
		<beans:property name="refreshTokenValiditySeconds" value="3600" />
		交互token有效时间(s):default 12 hours.
		<beans:property name="accessTokenValiditySeconds" value="3600" />
		<beans:property name="clientDetailsService" ref="custClientDetailsService" />
	</beans:bean>
 -->
    <!-- 
    	此配置已被com.sirding.service.impl.CustClientDetailsServiceImpl类取代，实现动态管理
    	ClientDetailsServiceConfigurer:
    		authorized-grant-types:客户端的验证类型，默认4种
     -->
	<!-- <oauth2:client-details-service id="clientDetailsService" >
        <oauth2:client 
        	client-id="mobile-client"
            secret="mobile" 
            scope="read,write,trust"
            authorized-grant-types="password,authorization_code,refresh_token,implicit"
            />
    </oauth2:client-details-service>  -->   
    
    
    <!-- 
    	用于验证 grant code并发放有效的access token
    	【待详细解释???
    		check-token-enabled="false"
    		check-token-endpoint-url="/oauth/check_token"
    	】
    	user-approval-handler-ref="oauthUserApprovalHandler"
     -->
    <!-- <oauth2:authorization-server
    	client-details-service-ref="custClientDetailsService"
    	token-services-ref="tokenServices"
    >
    	<oauth2:authorization-code/>
    	<oauth2:implicit/>
    	<oauth2:refresh-token/>
    	<oauth2:client-credentials/>
		<oauth2:password/>
    </oauth2:authorization-server>
    
    <oauth2:resource-server id="mobileResourceServer" resource-id="mobile-resource" token-services-ref="tokenServices"/>
     -->
   	<!-- 用于验证grant type和scope -->
    <!-- <beans:bean id="oAuth2RequestFactory" class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <beans:constructor-arg name="clientDetailsService" ref="clientDetailsService"/>
    </beans:bean> -->
    
    <!-- 认证处理器 -->
    <!-- <beans:bean id="oauthUserApprovalHandler" class="com.qiankundai.web.oauth.OauthUserApprovalHandler">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="clientDetailsService" ref="clientDetailsService"/>
        <beans:property name="requestFactory" ref="oAuth2RequestFactory"/>
        <beans:property name="oauthService" ref="oauthService"/>
    </beans:bean> -->
    
    <!-- <beans:bean id="oauth2ClientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetailsService"/>
    </beans:bean>

    <authentication-manager id="oauth2AuthenticationManager">
        <authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>
    </authentication-manager> -->



	<beans:bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
		<beans:constructor-arg index="0" ref="dataSource" />
	</beans:bean>

	<beans:bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="true" />
	</beans:bean>

	<beans:bean id="clientDetailsService"
		class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
		<beans:constructor-arg index="0" ref="dataSource" />
	</beans:bean>

	<beans:bean id="oauth2ClientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientDetailsService" />
	</beans:bean>

	<beans:bean id="oauth2AuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />

	<authentication-manager id="oauth2AuthenticationManager">
		<authentication-provider user-service-ref="oauth2ClientDetailsUserService" />
	</authentication-manager>


	<beans:bean id="oauth2AccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<beans:bean id="oauthUserApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler">
	</beans:bean>

	<oauth2:authorization-server
		client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
		user-approval-handler-ref="oauthUserApprovalHandler">
		<oauth2:authorization-code />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password />
	</oauth2:authorization-server>

	<beans:bean id="oauth2AccessDecisionManager"
		class="org.springframework.security.access.vote.UnanimousBased">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean
					class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean
					class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>

	<oauth2:resource-server id="unityResourceServer"
		resource-id="unity-resource" token-services-ref="tokenServices" />

	<oauth2:resource-server id="mobileResourceServer"
		resource-id="mobile-resource" token-services-ref="tokenServices" />
    
    <beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
	</beans:bean>


	<http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="oauth2AuthenticationManager"
		entry-point-ref="oauth2AuthenticationEntryPoint" use-expressions="false">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />

		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
		<csrf disabled="true"/>
	</http> 
    
    <!--unity http configuration-->  
	<http pattern="/unity/**" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint"  
	      access-decision-manager-ref="oauth2AccessDecisionManager" use-expressions="false">  
	    <anonymous enabled="false"/>  
	  
	    <intercept-url pattern="/unity/**" access="ROLE_UNITY,SCOPE_READ"/>  
	  
	    <custom-filter ref="unityResourceServer" before="PRE_AUTH_FILTER"/>  
	    <access-denied-handler ref="oauth2AccessDeniedHandler"/>  
	</http>  
	  
	<!--mobile http configuration-->  
	<http pattern="/m/**" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint"  
	      access-decision-manager-ref="oauth2AccessDecisionManager" use-expressions="false">  
	    <anonymous enabled="false"/>  
	  
	    <intercept-url pattern="/m/**" access="ROLE_MOBILE,SCOPE_READ"/>  
	  
	    <custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER"/>  
	    <access-denied-handler ref="oauth2AccessDeniedHandler"/>  
	</http> 
	
	
	<!-- 认证token的处理器 -->
	<beans:bean id="outh2AuthenticationProcessingFilter"
		class="org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter">
		<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
	</beans:bean> 

    <!-- *********************** Spring Oauth2 ****************************************** -->
    
    
    <!-- *********************** Spring security ****************************************** -->
    <!-- 
    	use-expressions:
    		是否启用SpEL表达式，如果设置为true,那么【access="hasRole("USER")】，ROLE的前缀可以自己定义，只需要重新定义
    		org.springframework.security.access.vote.RoleVoter中rolePrefix属性即可
    	auto-config:
    		自动注入授权、验证等的filter、默认为false，版本4.0.x默认加载11个filter
		form-login:
			此标签下的节点配置的具体意义参考官方文档，重点说明【login-processing-url="/auth/adminLogin.htm"】
			/auth/adminLogin.htm一定要是你登录的controller，如果不是那么你登录过程中将无法执行custUserDetailService
			中的验证授权的操作，即使你操作controller中完成用户的登录验证，进入到主页面，但依然没有任何权限；
			此部分验证过org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter类，但
			执行类之前先要执行其父类的中逻辑，具体验证流程如下：
			在(1)org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter#doFilter中调用
			本类中的(2)requiresAuthentication方法，然后调用(3)boolean org.springframework.security.web.util.matcher.AntPathRequestMatcher.matches(HttpServletRequest request)
			进行判断，其中方法最后matcher.matches(url)中url就是login-processing-url设置的值，如果不匹配，那么在(1)中的执行就会中断，导致自定义的
			custUserDetailService不能被执行，无法执行授权操作，最终结果，虽然进入自定义controller，但是没有任何操作权限。
		log-out：
			【(a)logout-success-url="/auth/login.jsp"】与【(b)success-handler-ref="custLogoutSuccessHandler"】二者只能配置一个
			如果配置a，那么执行退出后直接重定向到目标jsp页面，如果配置b那么可以在执行玩LogoutFilter后还可以添加自定义的逻辑，通过设置
			setDefaultTargetUrl再次重定向到指定的jsp页面，方便扩展。
			
			【logout-url="/auth/logout.htm"】如果controller中也配置了响应控制，那么将不走controller的接口， 因为在LogoutFilter中就已经
			进行重定向了，而且"/auth/logout.htm"要与也页面中的退出操作的url目标一致，这样才能进LogoutFilter过滤器
     -->
     
    <http use-expressions="false" disable-url-rewriting="true"
    	authentication-manager-ref="authenticationManager"
    	>
        <!-- <intercept-url pattern="/sec/**" access="ROLE_USER,ROLE_ADMIN"/> -->
        <intercept-url pattern="/oauth/**" access="ROLE_USER,ROLE_UNITY,ROLE_MOBILE"/>
        <intercept-url pattern="/auth/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <form-login 
        	authentication-failure-url="/auth/login.jsp" 
        	default-target-url="/auth/adminLogin.htm"
            login-page="/auth/login.jsp" 
            login-processing-url="/auth/adminLogin.htm"
            password-parameter="pwd"
            username-parameter="userName"
            />
            
        <logout 
        	logout-success-url="/auth/login.jsp"
        	logout-url="/auth/logout.htm"
        	/>
        
        <access-denied-handler error-page="/auth/login.jsp?authorization_error=2"/>
        <anonymous/>
        
        <csrf disabled="true"/>
    </http>
    
    <!-- 自定义退出filter -->
    <beans:bean id="custLogoutSuccessHandler" class="com.sirding.core.security.handler.CustLogoutSuccessHandler" />
    
    <!-- 
    	进入投票控制,默认为org.springframework.security.access.vote.AffirmativeBased一票通过决策策略，
    	如下定义为一票否决策略，AffirmativeBased默认加载了RoleVoter、AuthenticatedVoter投票接口，如果要使用如下
    	一票否决策略，应在<http>中添加【access-decision-manager-ref="UnanimousAccessDecisionManager"】
    	来替换默认一票通过策略
     -->
    <beans:bean id="UnanimousAccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
    	<beans:constructor-arg>
    		<beans:list>
    			<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
    			<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
    		</beans:list>
    	</beans:constructor-arg>
    </beans:bean>
    
    <!-- 验证 与授权的核心配置，几乎穿梭于整个请求过程 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="authenticationProvider" />
	</authentication-manager>

	<!-- 通过custUserDetailService验证用户并执行授权操作 -->
	<beans:bean id="authenticationProvider"	class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="custUserDetailService" />
		<beans:property name="passwordEncoder" ref="passwordEncoder" />
		<beans:property name="saltSource" ref="saltSource" />
	</beans:bean>

	<!-- 
		用户的密码的加密方式 ，此接口已经被废弃，建议使用
		org.springframework.security.crypto.password.PasswordEncoder
		进行加密操作
	-->
	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	<beans:bean id="saltSource"	class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<beans:property name="userPropertyToUse" value="username" />
	</beans:bean>
    <!-- *********************** Spring security ****************************************** -->
	
</beans:beans>